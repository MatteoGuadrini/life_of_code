{
    "componentChunkName": "component---node-modules-gatsby-theme-code-notes-src-templates-note-js",
    "path": "/python-dataclass",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Python Dataclass\",\n  \"tags\": [\"python\"],\n  \"emoji\": \"üêç\",\n  \"link\": \"https://docs.python.org/3/library/dataclasses.html\",\n  \"description\": \"Python dataclass decorator\",\n  \"modified\": \"2025-02-15T00:00:00.000Z\",\n  \"date\": \"2025-02-15T10:24:27.261Z\",\n  \"draft\": false,\n  \"categories\": [\"class\", \"python\", \"oop\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"python-dataclass\"\n  }, \"Python Dataclass\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataclasses\"), \" module, a feature introduced in Python 3.7, provides a way to create data classes in a simpler manner without the need to write methods.\\nA data class is a class typically containing mainly data, although there aren't really any restrictions. It is created using the new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@dataclass\"), \" decorator.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from dataclasses import dataclass\\n\\n@dataclass\\nclass DataClassCard:\\n    rank: str\\n    suit: str\\n\")), mdx(\"p\", null, \"A data class is a regular \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Python class\"), \". The only thing that sets it apart is that it has basic \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"data model methods\"), \" like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".__init__()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".__repr__()\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".__eq__()\"), \" implemented for you.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"queen_of_hearts = DataClassCard('Q', 'Hearts')\\nprint(queen_of_hearts.rank)\\nprint(queen_of_hearts == DataClassCard('Q', 'Hearts'))\\n\")), mdx(\"h2\", {\n    \"id\": \"default-values\"\n  }, \"Default Values\"), mdx(\"p\", null, \"It is easy to add default values to the fields of your data class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Position:\\n    name: str\\n    lon: float = 0.0\\n    lat: float = 0.0\\n\")), mdx(\"h2\", {\n    \"id\": \"type-hints\"\n  }, \"Type Hints\"), mdx(\"p\", null, \"So far, we have not made a big fuss of the fact that data classes support \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"typing\"), \" out of the box. You have probably noticed that we defined the fields with a type hint: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name: str\"), \" says that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" should be a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://realpython.com/python-strings/\"\n  }, \"text string\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"str\"), \" type).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from dataclasses import dataclass\\nfrom typing import Any\\n\\n@dataclass\\nclass WithoutExplicitTypes:\\n    name: Any\\n    value: Any = 42\\n\")), mdx(\"h2\", {\n    \"id\": \"adding-methods\"\n  }, \"Adding Methods\"), mdx(\"p\", null, \"You already know that a data class is just a regular class. That means that you can freely add your own methods to a data class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from dataclasses import dataclass\\nfrom math import asin, cos, radians, sin, sqrt\\n\\n@dataclass\\nclass Position:\\n    name: str\\n    lon: float = 0.0\\n    lat: float = 0.0\\n\\n    def distance_to(self, other):\\n        r = 6371  # Earth radius in kilometers\\n        lam_1, lam_2 = radians(self.lon), radians(other.lon)\\n        phi_1, phi_2 = radians(self.lat), radians(other.lat)\\n        h = (sin((phi_2 - phi_1) / 2)**2\\n             + cos(phi_1) * cos(phi_2) * sin((lam_2 - lam_1) / 2)**2)\\n        return 2 * r * asin(sqrt(h))\\n\")), mdx(\"h2\", {\n    \"id\": \"more-flexible-data-classes\"\n  }, \"More Flexible Data Classes\"), mdx(\"p\", null, \"Some more advanced features like parameters to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@dataclass\"), \" decorator and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"field()\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from dataclasses import dataclass\\nfrom typing import List\\n\\n@dataclass\\nclass PlayingCard:\\n    rank: str\\n    suit: str\\n\\n@dataclass\\nclass Deck:\\n    cards: List[PlayingCard]\\n\")), mdx(\"h2\", {\n    \"id\": \"advanced-default-values\"\n  }, \"Advanced Default Values\"), mdx(\"p\", null, \"Data classes use something called a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default_factory\"), \" to handle mutable default values. To use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default_factory\"), \" (and many other cool features of data classes), you need to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"field()\"), \" specifier.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from dataclasses import dataclass, field\\nfrom typing import List\\n\\nRANKS = '2 3 4 5 6 7 8 9 10 J Q K A'.split()\\nSUITS = '\\u2663 \\u2662 \\u2661 \\u2660'.split()\\n\\ndef make_french_deck():\\n    return [PlayingCard(r, s) for s in SUITS for r in RANKS]\\n\\n@dataclass\\nclass Deck:\\n    cards: List[PlayingCard] = field(default_factory=make_french_deck)\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"field()\"), \" specifier is used to customize each field of a data class individually. You will see some other examples later. For reference, these are the parameters \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"field()\"), \" supports:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"default\"), \": Default value of the field\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"default_factory\"), \": Function that returns the initial value of the field\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"init\"), \": Use field in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".__init__()\"), \" method? (Default is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"True\"), \".)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"repr\"), \": Use field in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"repr\"), \" of the object? (Default is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"True\"), \".)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"compare\"), \": Include the field in comparisons? (Default is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"True\"), \".)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hash\"), \": Include the field when calculating \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hash()\"), \"? (Default is to use the same as for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"compare\"), \".)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"metadata\"), \": A mapping with information about the field\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from dataclasses import dataclass, field\\n\\n@dataclass\\nclass Position:\\n    name: str\\n    lon: float = field(default=0.0, metadata={'unit': 'degrees'})\\n    lat: float = field(default=0.0, metadata={'unit': 'degrees'})\\n\")), mdx(\"h2\", {\n    \"id\": \"immutable-data-classes\"\n  }, \"Immutable Data Classes\"), mdx(\"p\", null, \"To make a data class immutable, set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frozen=True\"), \" when you create it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from dataclasses import dataclass\\n\\n@dataclass(frozen=True)\\nclass Position:\\n    name: str\\n    lon: float = 0.0\\n    lat: float = 0.0\\n\")), mdx(\"h2\", {\n    \"id\": \"inheritance\"\n  }, \"Inheritance\"), mdx(\"p\", null, \"You can subclass data classes quite freely.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Position:\\n    name: str\\n    lon: float\\n    lat: float\\n\\n@dataclass\\nclass Capital(Position):\\n    country: str\\n\")), mdx(\"h2\", {\n    \"id\": \"optimizing-data-classes\"\n  }, \"Optimizing Data Classes\"), mdx(\"p\", null, \"Slots can be used to make classes faster and use less memory. Data classes have no explicit syntax for working with slots, but the normal way of creating slots works for data classes as well.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"from dataclasses import dataclass\\n\\n@dataclass\\nclass SimplePosition:\\n    name: str\\n    lon: float\\n    lat: float\\n\\n@dataclass\\nclass SlotPosition:\\n    __slots__ = ['name', 'lon', 'lat']\\n    name: str\\n    lon: float\\n    lat: float\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Python Dataclass","tags":["python"],"emoji":"üêç","link":"https://docs.python.org/3/library/dataclasses.html","modified":"February 15, 2025","modifiedTimestamp":"2025-02-15T00:00:00.000Z"},"references":[],"fields":{"slug":"/python-dataclass"},"tableOfContents":{"items":[{"url":"#python-dataclass","title":"Python Dataclass","items":[{"url":"#default-values","title":"Default Values"},{"url":"#type-hints","title":"Type Hints"},{"url":"#adding-methods","title":"Adding Methods"},{"url":"#more-flexible-data-classes","title":"More Flexible Data Classes"},{"url":"#advanced-default-values","title":"Advanced Default Values"},{"url":"#immutable-data-classes","title":"Immutable Data Classes"},{"url":"#inheritance","title":"Inheritance"},{"url":"#optimizing-data-classes","title":"Optimizing Data Classes"}]}]},"parent":{"relativePath":"python-dataclass.md"}}},"pageContext":{"id":"32332acd-5fe6-5c95-9efb-3878f88918f3","previous":null,"next":{"id":"ff5f6f27-2254-51aa-872a-ea52ae0040e9","frontmatter":{"title":"Welcome to \"Life of Code\"","tags":["general"]},"fields":{"slug":"/welcome"}},"hasUntagged":false,"basePath":"/","tags":[{"tag":"general","totalCount":1,"slug":"/general","path":"/tag/general"},{"tag":"python","totalCount":5,"slug":"/python","path":"/tag/python"}]}},
    "staticQueryHashes": ["2566719832","2744905544","467212769"]}