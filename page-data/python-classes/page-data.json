{
    "componentChunkName": "component---node-modules-gatsby-theme-code-notes-src-templates-note-js",
    "path": "/python-classes",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Python Classes\",\n  \"tags\": [\"python\"],\n  \"emoji\": \"üêç\",\n  \"link\": \"https://docs.python.org/3/tutorial/classes.html#classes\",\n  \"description\": \"All about of Python classes\",\n  \"modified\": \"2025-01-12T00:00:00.000Z\",\n  \"date\": \"2025-01-12T16:36:38.992Z\",\n  \"draft\": false,\n  \"categories\": [\"oop\", \"python\", \"programming\", \"class\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"classes\"\n  }, \"Classes\"), mdx(\"p\", null, \"Classes provide a means of bundling data and functionality together. Creating a new class creates a new \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"type\"), \" of object, allowing new \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"instances\"), \" of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.\"), mdx(\"h2\", {\n    \"id\": \"class-definition\"\n  }, \"Class Definition\"), mdx(\"p\", null, \"The simplest form of class definition looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class ClassName:\\n    pass\\n\")), mdx(\"p\", null, \"Class definitions, like function definitions (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.python.org/3/reference/compound_stmts.html#def\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"def\")), \" statements) must be executed before they have any effect.\"), mdx(\"h2\", {\n    \"id\": \"class-objects\"\n  }, \"Class Objects\"), mdx(\"p\", null, \"Class objects support two kinds of operations: attribute references and instantiation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class MyClass:\\n    \\\"\\\"\\\"A simple example class\\\"\\\"\\\"\\n    i = 12345\\n\\n    def f(self):\\n        return 'hello world'\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyClass.i\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyClass.f\"), \" are valid attribute references, returning an integer and a function object, respectively. Class attributes can also be assigned to, so you can change the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyClass.i\"), \" by assignment. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.python.org/3/reference/datamodel.html#type.__doc__\",\n    \"title\": \"type.__doc__\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"__doc__\")), \" is also a valid attribute, returning the docstring belonging to the class: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"A simple example class\\\"\"), \".\"), mdx(\"p\", null, \"Class \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"instantiation\"), \" uses function notation. Just pretend that the class object is a parameterless function that returns a new instance of the class. For example (assuming the above class):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"x = MyClass()\\n\")), mdx(\"p\", null, \"creates a new \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"instance\"), \" of the class and assigns this object to the local variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \".\"), mdx(\"p\", null, \"The instantiation operation (\\u201Ccalling\\u201D a class object) creates an empty object. Many classes like to create objects with instances customized to a specific initial state. Therefore a class may define a special method named \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.python.org/3/reference/datamodel.html#object.__init__\",\n    \"title\": \"object.__init__\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"__init__()\")), \", like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def __init__(self):\\n    self.data = []\\n\")), mdx(\"p\", null, \"When a class defines an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.python.org/3/reference/datamodel.html#object.__init__\",\n    \"title\": \"object.__init__\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"__init__()\")), \" method, class instantiation automatically invokes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__init__()\"), \" for the newly created class instance.\"), mdx(\"h2\", {\n    \"id\": \"instance-objects\"\n  }, \"Instance Objects\"), mdx(\"p\", null, \"Now what can we do with instance objects? The only operations understood by instance objects are attribute references. There are two kinds of valid attribute names: data attributes and methods.\"), mdx(\"p\", null, \"For example, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" is the instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyClass\"), \" created above, the following piece of code will print the value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"16\"), \", without leaving a trace:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"x.counter = 1\\nwhile x.counter < 10:\\n    x.counter = x.counter * 2\\nprint(x.counter)\\ndel x.counter\\n\")), mdx(\"h2\", {\n    \"id\": \"method-objects\"\n  }, \"Method Objects\"), mdx(\"p\", null, \"Usually, a method is called right after it is bound:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"x.f()\\n\")), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyClass\"), \" example, this will return the string \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'hello world'\"), \". However, it is not necessary to call a method right away: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x.f\"), \" is a method object, and can be stored away and called at a later time. For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"xf = x.f\\nwhile True:\\n    print(xf())\\n\")), mdx(\"p\", null, \"will continue to print \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hello world\"), \" until the end of time.\"), mdx(\"h2\", {\n    \"id\": \"class-and-instance-variables\"\n  }, \"Class and Instance Variables\"), mdx(\"p\", null, \"Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class Dog:\\n\\n    kind = 'canine'         # class variable shared by all instances\\n\\n    def __init__(self, name):\\n        self.name = name    # instance variable unique to each instance\\n\\n>>> d = Dog('Fido')\\n>>> e = Dog('Buddy')\\n>>> d.kind                  # shared by all dogs\\n'canine'\\n>>> e.kind                  # shared by all dogs\\n'canine'\\n>>> d.name                  # unique to d\\n'Fido'\\n>>> e.name                  # unique to e\\n'Buddy'\\n\")), mdx(\"h2\", {\n    \"id\": \"inheritance\"\n  }, \"Inheritance\"), mdx(\"p\", null, \"Language feature would not be worthy of the name \\u201Cclass\\u201D without supporting inheritance. The syntax for a derived class definition looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class DerivedClassName(modname.BaseClassName):\\n    pass\\n\")), mdx(\"h3\", {\n    \"id\": \"multiple-inheritance\"\n  }, \"Multiple Inheritance\"), mdx(\"p\", null, \"Python supports a form of multiple inheritance as well. A class definition with multiple base classes looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"class DerivedClassName(Base1, Base2, Base3):\\n    pass\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Python Classes","tags":["python"],"emoji":"üêç","link":"https://docs.python.org/3/tutorial/classes.html#classes","modified":"January 12, 2025","modifiedTimestamp":"2025-01-12T00:00:00.000Z"},"references":[],"fields":{"slug":"/python-classes"},"tableOfContents":{"items":[{"url":"#classes","title":"Classes","items":[{"url":"#class-definition","title":"Class Definition"},{"url":"#class-objects","title":"Class Objects"},{"url":"#instance-objects","title":"Instance Objects"},{"url":"#method-objects","title":"Method Objects"},{"url":"#class-and-instance-variables","title":"Class and Instance Variables"},{"url":"#inheritance","title":"Inheritance","items":[{"url":"#multiple-inheritance","title":"Multiple Inheritance"}]}]}]},"parent":{"relativePath":"python-classes.md"}}},"pageContext":{"id":"5ef16480-c7e0-5754-82fc-32271bf6b9ef","previous":{"id":"c90c52bd-6dc9-55e5-83eb-c177e78db654","frontmatter":{"title":"Python Literals","tags":["python"]},"fields":{"slug":"/python-literals"}},"next":null,"hasUntagged":false,"basePath":"/","tags":[{"tag":"general","totalCount":1,"slug":"/general","path":"/tag/general"},{"tag":"python","totalCount":5,"slug":"/python","path":"/tag/python"}]}},
    "staticQueryHashes": ["2566719832","2744905544","467212769"]}