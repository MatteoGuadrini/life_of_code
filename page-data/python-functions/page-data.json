{
    "componentChunkName": "component---node-modules-gatsby-theme-code-notes-src-templates-note-js",
    "path": "/python-functions",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Python Functions\",\n  \"tags\": [\"python\"],\n  \"emoji\": \"🐍\",\n  \"link\": \"https://docs.python.org/3.13/reference/compound_stmts.html#function-definitions\",\n  \"description\": \"All about of Python functions\",\n  \"modified\": \"2024-11-09T00:00:00.000Z\",\n  \"date\": \"2024-11-09T13:25:04.992Z\",\n  \"draft\": false,\n  \"categories\": [\"function\", \"python\", \"programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"python-functions\"\n  }, \"Python functions\"), mdx(\"p\", null, \"Python functions is a block of statements that return the specific task.\"), mdx(\"p\", null, \"Some benefits of using functions are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"increase code readability \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"increase code reusability\")), mdx(\"h2\", {\n    \"id\": \"simple-function\"\n  }, \"Simple function\"), mdx(\"p\", null, \"To build a function, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"def\"), \" keyword and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \" of function, with parenthesis:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# A simple Python function\\ndef fun():\\n    \\\"\\\"\\\"This is doc; fun means function but also funny!\\\"\\\"\\\"\\n    print(\\\"Welcome to the jungle!\\\")\\n\")), mdx(\"p\", null, \"After you declare a function, you can use it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# Driver code to call a function\\nfun()\\n\")), mdx(\"h3\", {\n    \"id\": \"return-statement\"\n  }, \"Return statement\"), mdx(\"p\", null, \"With \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"return\"), \" keyword in a body of Python function, you specify a return point and object.\"), mdx(\"p\", null, \"To default every Python function return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"None\"), \" if return statement is not specified.\"), mdx(\"h2\", {\n    \"id\": \"function-with-arguments\"\n  }, \"Function with arguments\"), mdx(\"p\", null, \"Python function accepts some parameters, declared into parenthesis:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def add_something(one, two):\\n    \\\"\\\"\\\"Add some stuff\\\"\\\"\\\"\\n    result = one + two\\n    return result\\n\")), mdx(\"p\", null, \"And call it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# Call with strings...\\nprint(add_something(\\\"a\\\", \\\"b\\\"))  # ab\\n# ...and with integer\\nprint(add_something(1, 2))  # 3\\n\")), mdx(\"h3\", {\n    \"id\": \"default-arguments\"\n  }, \"Default arguments\"), mdx(\"p\", null, \"Python function parameters accept also default arguments:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def print_point(x=0, y=0):\\n    \\\"\\\"\\\"Print point position\\\"\\\"\\\"\\n    print(\\\"x: \\\", x)\\n    print(\\\"y: \\\", y)\\n\")), mdx(\"p\", null, \"And call it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# No specify arguments\\nprint_point()  # x: 0 and y: 0\\n# Specify one argument\\nprint_point(10)  # x: 10 and y: 0\\n# Specify two arguments\\nprint_point(10, 20)  # x: 10 and y: 20\\n# Specify two arguments with name\\nprint_point(y=10, x=20)  # x: 20 and y: 10\\n\")), mdx(\"h2\", {\n    \"id\": \"typed-function\"\n  }, \"Typed function\"), mdx(\"p\", null, \"Python function accepts type information of parameters and return statement (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-> str\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def person(name: str, age: int) -> str:\\n    \\\"\\\"\\\"Return person informations\\\"\\\"\\\"\\n    return f\\\"{name} is {age} year old\\\"\\n\")), mdx(\"p\", null, \"And call it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"print(person(\\\"Matteo\\\", 38))    # Matteo is 38 year old\\nprint(person(\\\"Marco\\\", 32))     # Marco is 32 year old\\nprint(person(\\\"Arthur\\\", 42))    # Arthur is 42 year old\\n\")), mdx(\"h2\", {\n    \"id\": \"arbitrary-arguments\"\n  }, \"Arbitrary arguments\"), mdx(\"p\", null, \"Python function accepts also an undefined numbers of arguments of two types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"positional\"), \" arguments; stored in a tuple\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"keyword\"), \" arguments; stored in a dictionary\")), mdx(\"h3\", {\n    \"id\": \"positional-arbitrary-arguments\"\n  }, \"Positional arbitrary arguments\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def concatenate(*strings):\\n    return \\\" \\\".join(strings)\\n\")), mdx(\"p\", null, \"And call it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"print(concatenate(\\\"Metal\\\", \\\"is\\\", \\\"forever\\\"))    # Metal is forever\\n\")), mdx(\"h3\", {\n    \"id\": \"keyword-arbitrary-arguments\"\n  }, \"Keyword arbitrary arguments\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def book(author, title, **infos):\\n    b = {\\n        \\\"author\\\": author,\\n        \\\"title\\\": title\\n    }\\n    b.update(infos)\\n    return b\\n\")), mdx(\"p\", null, \"And call it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"lord_of_the_rings = book(\\\"J. R. R. Tolkien\\\", \\\"Lord of The Rings\\\", year=1954, publication=2)\\nprint(lord_of_the_rings) # {'author': 'J. R. R. Tolkien', 'title': 'Lord of The Rings', 'year': 1954, 'publication': 2}\\nsilmarillion = book(\\\"J. R. R. Tolkien\\\", \\\"Silmarillion\\\", pages=688, language=\\\"english\\\")\\nprint(silmarillion) # {'author': 'J. R. R. Tolkien', 'title': 'Silmarillion', 'pages': 688, 'language': 'english'}\\n\")), mdx(\"h2\", {\n    \"id\": \"anonymous-functions\"\n  }, \"Anonymous functions\"), mdx(\"p\", null, \"In Python, an anonymous function means that a function is without a name. As we already know the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"def\"), \" keyword is used to define the normal functions and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lambda\"), \" keyword is used to create anonymous functions, and after that, the arguments is specify.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"cube = lambda number: number * number * number\\nprint(cube(7))  # 343\\n\")), mdx(\"h2\", {\n    \"id\": \"function-decorator\"\n  }, \"Function decorator\"), mdx(\"p\", null, \"A function that is defined inside another function is known as the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"inner\"), \" function or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"nested\"), \" function. Nested functions can access variables of the enclosing scope. Inner functions are used so that they can be protected from everything happening outside the function. This type of functions is called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"decorators\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def add_to_number(x):\\n    def inner(y):\\n        return x + y\\n    return inner\\n\")), mdx(\"p\", null, \"And call it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"add_five = add_to_number(5)\\nresult = add_five(6)\\nprint(result)  # 11\\n\")), mdx(\"h3\", {\n    \"id\": \"pass-function-as-argument\"\n  }, \"Pass function as argument\"), mdx(\"p\", null, \"We can pass a function as an argument to another function in Python.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def add(x, y):\\n    return x + y\\n\\ndef calculate(func, x, y):\\n    return func(x, y)\\n\")), mdx(\"p\", null, \"And call it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"result = calculate(add, 4, 6)\\nprint(result)  # 10\\n\")), mdx(\"h3\", {\n    \"id\": \"decorate-other-function\"\n  }, \"Decorate other function\"), mdx(\"p\", null, \"Instead of assigning the function call to a variable, Python provides a much more elegant way to achieve this functionality using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@\"), \" symbol.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def make_pretty(func):\\n\\n    def inner():\\n        print(\\\"%\\\" * 13)\\n        func()\\n        print(\\\"%\\\" * 13)\\n    return inner\\n\\n@make_pretty\\ndef ordinary():\\n    print(\\\"I am ordinary\\\")\\n\")), mdx(\"p\", null, \"And call it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"ordinary()\\n# %%%%%%%%%%%%%\\n# I am ordinary\\n# %%%%%%%%%%%%%\\n\")), mdx(\"h3\", {\n    \"id\": \"decorate-with-arguments\"\n  }, \"Decorate with arguments\"), mdx(\"p\", null, \"Is possible to pass arguments to function decorator\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def make_pretty(symbol):\\n\\n    def inner(func):\\n        print(symbol * 13)\\n        func()\\n        print(symbol * 13)\\n    return inner\\n\\n@make_pretty(\\\"+\\\")\\ndef ordinary():\\n    print(\\\"I am ordinary\\\")\\n\")), mdx(\"p\", null, \"And call it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"ordinary()\\n# +++++++++++++\\n# I am ordinary\\n# +++++++++++++\\n\")), mdx(\"h2\", {\n    \"id\": \"function-generators\"\n  }, \"Function generators\"), mdx(\"p\", null, \"Function generators is a function that returns an iterator using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yield\"), \" keyword.   \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def fib(limit):\\n    a, b = 0, 1\\n    while b < limit:\\n        yield b\\n        a, b = b, a + b\\n\")), mdx(\"p\", null, \"And call it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# Create a generator object\\nx = fib(200)\\n\\n# Iterate over the generator object and print each value\\nfor i in x:\\n    print(i)\\n# 1\\n# 1\\n# 2\\n# 3\\n# 5\\n# 8\\n# 13\\n# 21\\n# 34\\n# 55\\n# 89\\n# 144\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Python Functions","tags":["python"],"emoji":"🐍","link":"https://docs.python.org/3.13/reference/compound_stmts.html#function-definitions","modified":"November 9, 2024","modifiedTimestamp":"2024-11-09T00:00:00.000Z"},"references":[],"fields":{"slug":"/python-functions"},"tableOfContents":{"items":[{"url":"#python-functions","title":"Python functions","items":[{"url":"#simple-function","title":"Simple function","items":[{"url":"#return-statement","title":"Return statement"}]},{"url":"#function-with-arguments","title":"Function with arguments","items":[{"url":"#default-arguments","title":"Default arguments"}]},{"url":"#typed-function","title":"Typed function"},{"url":"#arbitrary-arguments","title":"Arbitrary arguments","items":[{"url":"#positional-arbitrary-arguments","title":"Positional arbitrary arguments"},{"url":"#keyword-arbitrary-arguments","title":"Keyword arbitrary arguments"}]},{"url":"#anonymous-functions","title":"Anonymous functions"},{"url":"#function-decorator","title":"Function decorator","items":[{"url":"#pass-function-as-argument","title":"Pass function as argument"},{"url":"#decorate-other-function","title":"Decorate other function"},{"url":"#decorate-with-arguments","title":"Decorate with arguments"}]},{"url":"#function-generators","title":"Function generators"}]}]},"parent":{"relativePath":"python-functions.md"}}},"pageContext":{"id":"d4f1a493-2b3f-593e-90a0-665591721943","previous":{"id":"c90c52bd-6dc9-55e5-83eb-c177e78db654","frontmatter":{"title":"Python Literals","tags":["python"]},"fields":{"slug":"/python-literals"}},"next":{"id":"32332acd-5fe6-5c95-9efb-3878f88918f3","frontmatter":{"title":"Python Dataclass","tags":["python"]},"fields":{"slug":"/python-dataclass"}},"hasUntagged":false,"basePath":"/","tags":[{"tag":"general","totalCount":1,"slug":"/general","path":"/tag/general"},{"tag":"python","totalCount":6,"slug":"/python","path":"/tag/python"}]}},
    "staticQueryHashes": ["2566719832","2744905544","467212769"]}