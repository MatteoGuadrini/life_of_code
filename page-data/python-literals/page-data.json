{
    "componentChunkName": "component---node-modules-gatsby-theme-code-notes-src-templates-note-js",
    "path": "/python-literals",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Python Literals\",\n  \"tags\": [\"python\"],\n  \"emoji\": \"üêç\",\n  \"link\": \"https://docs.python.org/3/reference/lexical_analysis.html#literals\",\n  \"description\": \"Python literals and basic syntax\",\n  \"modified\": \"2024-09-08T00:00:00.000Z\",\n  \"date\": \"2024-09-08T08:30:42.281Z\",\n  \"draft\": false,\n  \"categories\": [\"literals\", \"python\", \"programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"python-literals\"\n  }, \"Python literals\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Python literals\"), \" are a data type and can hold any value type, such as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"strings\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"numbers\"), \", and more.\"), mdx(\"p\", null, \"Because Python literals are used to store base data for the source code of your software,\\nthey need to be robust enough to work with any data.\\nPython literals can hold any data you need.\"), mdx(\"h2\", {\n    \"id\": \"strings\"\n  }, \"Strings\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Strings\"), \" are one of the most common data value types you will work with in Python. All string literals are enclosed between two quotes (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"''\"), \") or double quotes (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"\\\"\"), \") characters.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"s = 'It\\\\'s Always Sunny'    # in a single quote\\nt = \\\"It's Always Sunny\\\"     # in double quotes\\nm = '''It\\\\'s\\n          Always\\n          Sunny'''  # multi-line String\\nsqc = 'D' # character literal in single quote\\ndqc = \\\"R\\\" # character literal in double quotes\\n\")), mdx(\"h2\", {\n    \"id\": \"numeric\"\n  }, \"Numeric\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Numeric\"), \" values are another value you will find yourself working with often.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"nb = 0b10100  # Binary Literals\\nnd = 50       # Decimal Literal\\nno = 0o320    # Octal Literal\\nnh = 0x12b    # Hexadecimal Literal\\nnf = 24.8     # Float Literal\\n\")), mdx(\"h2\", {\n    \"id\": \"booleans\"\n  }, \"Booleans\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Boolean\"), \" values are beneficial, especially in the source code of your software, as they are frequently used to set operating parameters.\"), mdx(\"p\", null, \"Booleans are two: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"True\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"False\"), \"; each one are an alias of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"0\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"False\"), \") and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"True\"), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"one = (1 == True)           # true\\ntwo = (2 == False)          # false\\nthree = (3 == True)         # false\\nboolTruMath = True + 10     # Result is 11\\nboolFalseMath = False + 10  # Result is 10\\n\")), mdx(\"h2\", {\n    \"id\": \"collections\"\n  }, \"Collections\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Collections\"), \" are also helpful, and the fact is you will likely need them to store collections of data in your source code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"numList = [1, 2, 3, 4, 5] # List\\nnumTuple = (1, 2, 3, 4, 5) # Tuple\\nnumSet = {'1', '2', '3', '4', '5'} # Set\\npeopleDict = {'D': 'Deandra', 'C': 'Charlie', 'M': 'Mac'} # Dictionary\\n\")), mdx(\"h2\", {\n    \"id\": \"special\"\n  }, \"Special\"), mdx(\"p\", null, \"Finally, a special literal is used to signify a null value, and the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"None\"), \" keyword can be used in a literal when you need a value to be null or \\u2014 no value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"iAmNone = None # Special literals\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Python Literals","tags":["python"],"emoji":"üêç","link":"https://docs.python.org/3/reference/lexical_analysis.html#literals","modified":"September 8, 2024","modifiedTimestamp":"2024-09-08T00:00:00.000Z"},"references":[],"fields":{"slug":"/python-literals"},"tableOfContents":{"items":[{"url":"#python-literals","title":"Python literals","items":[{"url":"#strings","title":"Strings"},{"url":"#numeric","title":"Numeric"},{"url":"#booleans","title":"Booleans"},{"url":"#collections","title":"Collections"},{"url":"#special","title":"Special"}]}]},"parent":{"relativePath":"python-literals.md"}}},"pageContext":{"id":"c90c52bd-6dc9-55e5-83eb-c177e78db654","previous":{"id":"69b35775-847b-5e56-98a7-ae98329861ee","frontmatter":{"title":"Python Paradigm","tags":["python"]},"fields":{"slug":"/python-paradigm"}},"next":{"id":"d4f1a493-2b3f-593e-90a0-665591721943","frontmatter":{"title":"Python Functions","tags":["python"]},"fields":{"slug":"/python-functions"}},"hasUntagged":false,"basePath":"/","tags":[{"tag":"general","totalCount":1,"slug":"/general","path":"/tag/general"},{"tag":"python","totalCount":6,"slug":"/python","path":"/tag/python"}]}},
    "staticQueryHashes": ["2566719832","2744905544","467212769"]}